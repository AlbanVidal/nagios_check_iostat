#!/bin/bash

# VERSION 1.4 - 2018-01-23
#
# check_iostat - check usage of lvm ThinPool
#
# Copyright (C) 2018 Alban Vidal <alban.vidal@zordhak.fr>
#
# GNU GENERAL PUBLIC LICENSE Version 3
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

################################################################################
##########                       Exit number list:                    ########## 
################################################################################
# 0 OK
# 1 WARNING
# 2 CRITICAL
# 3 UNKNOWN         Unknown Invalid command line arguments - see error bellow

################################################################################
##########                   Exit error number list:                  ########## 
# 4  => Unknown option
# 6  => WARNING can't be upper or equal to CRITICAL
# 12 => option is empty - require a number
# 13 => opts: x is not a number
# 14 => opts: x need interval between Y-Z
# 15 => --devices option require exrp, see examples
# 16 => Binary not known
################################################################################

################################################################################
##########                        DEFAULTS OPTIONS                    ##########
################################################################################
WARNING=80
CRITICAL=90
DISKS_EXPR="sd|mmc"
INTERVAL=5
PERF_DATA=false

################################################################################

_SCRIPT_NAME_=${0##*/}

################################################################################
## COLORS
reset="$(tput sgr0)"
red="$(tput setaf 1)"
green="$(tput setaf 2)"
yellow="$(tput setaf 3)"

# Print error messages
function error()
{
    exit_nb=$1
    shift
    # NOTE: don't redirect in stderr « >&2 » , else nrpe can't read output
#    echo "ERROR $exit_nb: $@" >&2
    echo "ERROR $exit_nb: $@"
    exit 3
}

# Usage (called by -h or --help)
function usage()
{

    echo "Usage: $_SCRIPT_NAME_ [options]"
    echo "Options:"
    echo "    -d, --devices  <disks_expr>    Expression of disks search (defaut: sd|mmc)"
    echo "    -i, --interval <interval>      Specifies the amount of time in seconds between each report (between 1-10, default: 5)"
    echo "    -w, --warning  <percent>       Define usage warning percent (between 0-100, default: 80)"
    echo "    -c, --critical <percent>       Define usage critical percent (between 0-100, default: 100)"
    echo "    -p, --perf-data                Enable performance data output"
    echo "    -e, --examples                 Show usage examples"
    echo "    -h, --help                     print this help"
    echo ""
    echo "------------------------------------------------------------------------------------------"
    echo ""
    echo "${green}REPORTS Values — see man iostat(1) for more details${reset}"
    echo ""
    echo "${yellow}rrqm/s${reset}"
    echo "    The number of read requests merged per second that were queued to the device."
    echo "${yellow}wrqm/s${reset}"
    echo "    The number of write requests merged per second that were queued to the device."
    echo "${yellow}r/s${reset}"
    echo "    The number (after merges) of read requests completed per second for the device."
    echo "${yellow}w/s${reset}"
    echo "    The number (after merges) of write requests completed per second for the device."
    echo "${yellow}rsec/s (rkB/s, rMB/s)${reset}"
    echo "    The number of sectors (kilobytes,megabytes) read from the device per second."
    echo "${yellow}wsec/s (wkB/s, wMB/s)${reset}"
    echo "    The number of sectors (kilobytes, megabytes) written to the device per second."
    echo "${yellow}avgrq-sz${reset}"
    echo "    The average size (in sectors) of the requests that were issued to the device."
    echo "${yellow}avgqu-sz${reset}"
    echo "    The average queue length of the requests that were issued to the device."
    echo "${yellow}await${reset}"
    echo "    The  average time (in milliseconds) for I/O requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them."
    echo "${yellow}r_await${reset}"
    echo "    The average time (in milliseconds) for read requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them."
    echo "${yellow}w_await${reset}"
    echo "    The  average  time  (in  milliseconds)  for write requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them."
    echo "${yellow}svctm${reset}"
    echo "    The average service time (in milliseconds) for I/O requests that were issued to the device. ${red}Warning! Do not trust this field any more. This field will be removed in a future sysstat version.${reset}"
    echo "${yellow}%util${reset}"
    echo "    Percentage  of elapsed time during which I/O requests were issued to the device (bandwidth utilization for the device). Device saturation occurs when this value is close to 100% for devices serving requests serially. But for devices serving requests in parallel, such as RAID arrays and modern SSDs, this number does not reflect their performance limits."
    echo ""
    echo "------------------------------------------------------------------------------------------"
    echo "    check_iostat Copyright (C) 2018 Alban Vidal <alban.vidal@zordhak.fr>"
    echo "    This program comes with ABSOLUTELY NO WARRANTY"
    echo "    This is free software, and you are welcome to redistribute it under certain conditions"
    echo "    GNU GENERAL PUBLIC LICENSE Version 3"
    exit 0
}

function examples()
{
    echo "${yellow}Usage examples:${reset}"
    echo ""
    echo "${green}Check only sda and sdb devices:${reset}"
    echo "${yellow}check_iostat --devices 'sda|sdb'${reset}"
    echo "  OK"
    echo "  State:  Device:  rrqm/s  wrqm/s  r/s   w/s     rMB/s  wMB/s  avgrq-sz  avgqu-sz  await  r_await  w_await  svctm  %util"
    echo "  OK      sdb      0,00    0,00    0,00  0,00    0,00   0,00   0,00      0,00      0,00   0,00     0,00     0,00   0,00"
    echo "  OK      sda      0,00    163,40  0,00  592,80  0,00   3,16   10,90     1,44      2,44   0,00     2,44     0,03   1,92"
    echo ""
    echo "${green}Check only sdd and md* devices:${reset}"
    echo "${yellow}check_iostat --devices 'sdd|md'${reset}"
    echo "  OK"
    echo "  State:  Device:  rrqm/s  wrqm/s  r/s   w/s   rMB/s  wMB/s  avgrq-sz  avgqu-sz  await  r_await  w_await  svctm  %util"
    echo "  OK      sdd      0,00    0,00    0,00  1,60  0,00   0,00   3,00      0,01      4,00   0,00     4,00     4,00   0,64"
    echo "  OK      md0      0,00    0,00    0,00  0,00  0,00   0,00   0,00      0,00      0,00   0,00     0,00     0,00   0,00"
    echo ""
    echo "${green}Change range Waning and Critical:${reset}"
    echo "${yellow}check_iostat -w 90 -c 95${reset}"
    echo "  OK"
    echo "  State:  Device:  rrqm/s  wrqm/s  r/s   w/s      rMB/s  wMB/s  avgrq-sz  avgqu-sz  await  r_await  w_await  svctm  %util"
    echo "  OK      sdb      0,00    0,00    0,00  0,00     0,00   0,00   0,00      0,00      0,00   0,00     0,00     0,00   0,00"
    echo "  OK      sda      0,00    283,80  0,00  1399,80  0,00   7,62   11,15     5,01      3,58   0,00     3,58     0,04   5,04"
    echo ""
    echo "${green}Change range Waning and Critical:${reset}"
    echo "${yellow}check_iostat -w 5 -c 10${reset}"
    echo "  WARN,   see_details_above:"
    echo "  State:  Device:             rrqm/s  wrqm/s  r/s   w/s      rMB/s  wMB/s  avgrq-sz  avgqu-sz  await  r_await  w_await  svctm  %util"
    echo "  OK      sdb                 0,00    0,00    0,00  0,00     0,00   0,00   0,00      0,00      0,00   0,00     0,00     0,00   0,00"
    echo "  WARN    sda                 0,00    253,80  0,40  1264,60  0,00   6,88   11,14     5,08      4,01   0,00     4,01     0,04   5,12"
    echo ""
    echo "${green}On Raspberry Pi (with Raspbian)${reset}"
    echo "${yellow}check_iostat${reset}"
    echo "  OK"
    echo "  State:  Device:  rrqm/s  wrqm/s  r/s   w/s   rMB/s  wMB/s  avgrq-sz  avgqu-sz  await  r_await  w_await  svctm  %util"
    echo "  OK      mmcblk0  0.00    0.00    0.00  0.00  0.00   0.00   0.00      0.00      0.00   0.00     0.00     0.00   0.00"
    echo ""
    echo "${green}Change interval, only in sda and sdb, warning 50${reset}"
    echo "${yellow}check_iostat -i 1 -d 'sda|sdd' -w 50${reset}"
    echo "  CRITICAL,  see_details_above:"
    echo "  State:     Device:             rrqm/s  wrqm/s  r/s   w/s       rMB/s  wMB/s  avgrq-sz  avgqu-sz  await  r_await  w_await  svctm  %util"
    echo "  CRIT       sda                 0,00    86,00   0,00  35784,00  0,00   10,16  0,58      8,91      0,24   0,00     0,24     0,03   94,80"
    echo "  OK         sdd                 0,00    0,00    0,00  0,00      0,00   0,00   0,00      0,00      0,00   0,00     0,00     0,00   0,00"
    echo ""

    exit 0
}

function check_binary()
{
    # $1 => binary to check
    if ! which $1 > /dev/null 2>&1 ;then
        error 16 $1: binary not known
    fi
}

function check_number()
{
    # $1 => arg
    local arg=$1
    # $2 => min
    local min=$2
    # $3 => max
    local max=$3
    # $4 => number to check
    local check=$4

    # Check if not empty
    if [[ $check == "" ]]
    then
        error 12 $arg opts: option is empty - require a number
    fi

    # Check if is number
    if ! [[ $check =~ ^[0-9]+$ ]] # OK
    then
        error 13 $arg opts: $check is not a number
    fi

    # Check if > 0 and < 100
    if ! [ "$2" -ge $min -a "$check" -le $max ]
    then
        error 14 $arg opts: $check need interval between ${min}-${max}
    fi
}

# Check args
opt="$1"
while test ! -z "$opt" -a -z "${opt##-*}"
do

    case "$opt" in
        "-h"|"--help")
            usage
            ;;
        "-e"|"--examples")
            examples
            ;;
        "-d"|"--devices")
            if ! [ -z "$2" ] ;then
                DISKS_EXPR=$2
            else
                error 15 --devices option require exrp, see examples
            fi
            shift
            ;;
        "-i"|"--interval")
            check_number warning  1 10  $2 # test if INTERVAL is between 1-10
            INTERVAL=$2
            shift
            ;;
        "-w"|"--warning")
            check_number warning  0 100 $2 # test if WARNING is between 0-100
            WARNING=$2
            shift
            ;;
        "-c"|"--critical")
            check_number critical 0 100 $2 # test if CRITICAL is between 0-100
            CRITICAL=$2
            shift
            ;;
        "-p"|"--perf-data")
            PERF_DATA=true # Enable performance data output
            ;;
        *)
            error 4 Unknown option: $1
            ;;
    esac

    shift
    opt="$1"
done

# TEST if WARN > to CRIT => ERR
if [ $WARNING -ge $CRITICAL ] ;then
    error 6 WARNING \($WARNING\) can\'t be upper or equal to CRITICAL \($CRITICAL\)
fi

# Check binary
check_binary iostat
check_binary column
check_binary awk
check_binary sfdisk

# Names of hard drives, only in one line
HDD_LIST=$(echo -n $(sfdisk -s|grep -E "^/dev/${DISKS_EXPR}"|awk '{print $1}'|sed 's/://g')|sort)

RESULT=$(iostat -xyd -m $HDD_LIST $INTERVAL 1)
#       -x     Display extended statistics.
#       -y     Omit first report with statistics since system boot, if displaying multiple records at given interval.
#       -d     Display the device utilization report.
#       -m     Display statistics in megabytes per second.
# during X seconds
# check 1 time

# number of warning and critical error
number_WARN=0
number_CRIT=0

# Declare rows names and values
declare -A rows=()      # Used by performance data
declare -A values=()

while read DISK;do
    Device=$(echo $DISK|awk '{print $1}')
    # search column names:
    if echo $Device|grep -q '^Device';then
        HEAD=$(echo $DISK)

        # If performance data is enable
        if $PERF_DATA ; then
            for i in {2..14}; do
                rows[$i]=$(echo $DISK|awk '{print $'$i'}')
            done
        fi

    fi

    # grep physical devices:
    if echo $Device|grep -q -E "^${DISKS_EXPR}";then
        _util=$(echo $DISK|awk '{print $14}')

        # Store values in array
        for i in {2..14}; do
            values[$i]=$(echo $DISK|awk '{print $'$i'}')
        done

        unset TMP
        # delete « . » or « , » char
        _util=${_util%%,*}
        _util=${_util%%.*}

        if [ ${_util} -ge $CRITICAL ];then
            TMP="CRIT"
            (( number_CRIT ++ ))
        elif [ ${_util} -ge $WARNING ];then
            TMP="WARN"
            (( number_WARN ++ ))
        else
            TMP="OK"
        fi

        # Create end of output
        unset END
        for i in {2..14}; do
            END="${END} ${values[$i]}"
        done
        # Indent in output :
        RETURN="${RETURN}\n${TMP} $Device ${END}%"

        # If performance data is enable
        if $PERF_DATA ; then
            unset PERF_END
            for i in {2..14}; do
                PERF_END="$PERF_END ${Device}_${rows[$i]}=${values[$i]}"
            done
            PERF_OUTPUT="${PERF_OUTPUT} $PERF_END%"
        fi

    fi
done <<< "$RESULT"

if   [ $number_CRIT -gt 0 ];then
    echo -e "CRITICAL, see_details_above:\nState: ${HEAD}\n${RETURN}"|column -t
    exit 2
elif [ $number_WARN -gt 0 ];then
    echo -e "WARNING, see_details_above:\nState: ${HEAD}\n${RETURN}"|column -t
    exit 1
else
    echo -e "OK\nState: ${HEAD}\n${RETURN}"|column -t

    # If performance data is enable
    if $PERF_DATA ; then
        echo "|$PERF_OUTPUT"
    fi

    exit 0
fi

################################################################################
