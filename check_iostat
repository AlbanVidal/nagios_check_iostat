#!/bin/bash

# VERSION 1.1 - 2018-01-11
#
# check_iostat - check usage of lvm ThinPool
#
# Copyright (C) 2018 Alban Vidal <alban.vidal@zordhak.fr>
#
# GNU GENERAL PUBLIC LICENSE Version 3
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

################################################################################
##########                       Exit number list:                    ########## 
################################################################################
# 0 OK
# 1 WARNING
# 2 CRITICAL
# 3 UNKNOWN         Unknown Invalid command line arguments - see error bellow

################################################################################
##########                   Exit error number list:                  ########## 
# 4  => Unknown option
# 6  => WARNING can't be upper or equal to CRITICAL
# 12 => option is empty - require a number
# 13 => opts: x is not a number
# 14 => opts: x need interval between 0-100
################################################################################

################################################################################
##########                        DEFAULTS OPTIONS                    ##########
################################################################################
WARNING=80
CRITICAL=90

################################################################################

_SCRIPT_NAME_=${0##*/}

# Print error messages
function error()
{
    exit_nb=$1
    shift
    # NOTE: don't redirect in stderr « >&2 » , else nrpe can't read output
#    echo "ERROR $exit_nb: $@" >&2
    echo "ERROR $exit_nb: $@"
    exit 3
}

# Usage (called by -h or --help)
function usage()
{

    echo "Usage: $_SCRIPT_NAME_ [options]"
    echo "Options:"
    echo "    -w,--warning <percent>     define usage warning percent (between 0-100, default: 80)"
    echo "    -c,--critical <percent>    define usage critical percent (between 0-100, default: 100)"
    echo "    -h,--help                  print this help"
    echo ""
    echo "------------------------------------------------------------------------------------------"
    echo "    check_iostat Copyright (C) 2018 Alban Vidal <alban.vidal@zordhak.fr>"
    echo "    This program comes with ABSOLUTELY NO WARRANTY"
    echo "    This is free software, and you are welcome to redistribute it under certain conditions"
    echo "    GNU GENERAL PUBLIC LICENSE Version 3"
    exit 0
}

function check_number()
{
    # $1 => arg
    # $2 => number to check

    # Check if not empty
    if [[ $2 == "" ]]
    then
        error 12 $1 opts: option is empty - require a number
    fi

    # Check if is number
    if ! [[ $2 =~ ^[0-9]+$ ]] # OK
    then
        error 13 $1 opts: $2 is not a number
    fi

    # Check if > 0 and < 100
    if ! [ "$2" -ge 0 -a "$2" -le 100 ]
    then
        error 14 $1 opts: $2 need interval between 0-100
    fi
}

# Check args
opt="$1"
while test ! -z "$opt" -a -z "${opt##-*}"
do

    case "$opt" in
        "-h"|"--help")
            usage
            ;;
        "-w"|"--warning")
            check_number warning $2
            WARNING=$2
            shift
            ;;
        "-c"|"--critical")
            check_number critical $2
            CRITICAL=$2
            shift
            ;;
        *)
            error 4 Unknown option: $1
            ;;
    esac

    shift
    opt="$1"
done

# TEST if WARN > to CRIT => ERR
if [ $WARNING -ge $CRITICAL ] ;then
    error 6 WARNING \($WARNING\) can\'t be upper or equal to CRITICAL \($CRITICAL\)
fi

# Names of hard drives, only in one line
HDD_LIST=$(echo -n $(sfdisk -s|grep '^/dev/sd'|awk '{print $1}'|sed 's/://g')|sort)

RESULT=$(iostat -xyd -m $HDD_LIST 5 1)
#       -x     Display extended statistics.
#       -y     Omit first report with statistics since system boot, if displaying multiple records at given interval.
#       -d     Display the device utilization report.
#       -m     Display statistics in megabytes per second.
# during 5 seconds
# check 1 time

# number of warning and critical error
number_WARN=0
number_CRIT=0

# Initialise output return
RETURN=""

while read DISK;do
    Device=$(echo $DISK|awk '{print $1}')
    # search column names:
    if echo $Device|grep -q '^Device';then
        HEAD=$(echo $DISK)
    fi

    # grep physical devices:
    if echo $Device|grep -q '^sd';then
        _util=$(echo $DISK|awk '{print $14}')
        
        unset TMP
        # delete « . » or « , » char
        _util=${_util%%,*}
        _util=${_util%%.*}

        if [ ${_util} -ge $CRITICAL ];then
            TMP="CRIT"
            (( number_CRIT ++ ))
        elif [ ${_util} -ge $WARNING ];then
            TMP="WARN"
            (( number_WARN ++ ))
        else
            TMP="OK"
        fi
        # Indent in output :
        RETURN="${RETURN}\n${TMP} ${DISK}"
    fi
done <<< $RESULT

if   [ $number_CRIT -gt 0 ];then
    echo -e "CRIT, see_details_above:\nState: ${HEAD}\n${RETURN}"|column -t
    exit 2
elif [ $number_WARN -gt 0 ];then
    echo -e "WARN, see_details_above:\nState: ${HEAD}\n${RETURN}"|column -t
    exit 1
else
    echo -e "OK\nState: ${HEAD}\n${RETURN}"|column -t
    exit 0
fi

################################################################################
